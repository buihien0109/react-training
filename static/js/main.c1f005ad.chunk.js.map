{"version":3,"sources":["components/Status.js","components/Question.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Status","props","this","currentQuestion","totalQuestion","progress","time","progressCurrentQuestion","Math","floor","className","style","width","React","Component","Question","quizzes","total","numberQuestionRight","length","quiz","question","answers","map","answer","index","key","onClick","onSelectQuestion","correct","onNextQuestion","Popup","state","title","text","buttonText","setState","popupHandle","App","displayPopup","toast","success","position","POSITION","TOP_CENTER","autoClose","error","elePopup","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1f005ad.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Status extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    const { currentQuestion, totalQuestion, time} = this.props\n    const progress = (time / 30) * 100;\n    const progressCurrentQuestion = Math.floor((progress * 350) / 100)\n\n    return (\n      <div className=\"Header\">\n        <div className=\"LeftSide\">\n          <div className=\"ProgressBar\" style={{ width: progressCurrentQuestion }}>\n            <span className=\"Percent\">{progress}%</span>\n          </div>\n        </div>\n        <div className=\"RightSide\">\n          <div className=\"CurrentQuestion\">{currentQuestion + 1}/{totalQuestion}</div>\n        </div>\n      </div>\n    );\n  }\n  \n\n  \n}\n\nexport default Status;\n","import React from \"react\";\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n \n\n  render() {\n    const { quizzes, currentQuestion, numberQuestionRight } = this.props;\n    const total = quizzes.length\n    const quiz =\n      currentQuestion < total\n        ? quizzes[currentQuestion]\n        : quizzes[total - 1];\n\n    return (\n      <main>\n        <div className=\"Body\">\n          <div className=\"Question\">{quiz.question}</div>\n\n          <div className=\"PossibleAnwsers\">\n            {quiz.answers.map((answer, index) => (\n              <div\n                className=\"Anwser\"\n                key={index}\n                onClick={() => {\n                  this.props.onSelectQuestion(answer, quiz.correct);\n                }}\n              >\n                <div className=\"AnwserIndex\">{index + 1}</div>\n                <div className=\"AnwserContent\">{answer}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"Footer\">\n          <button\n            className=\"Button ButtonSmall btn btn-secondary\"\n            onClick={this.props.onNextQuestion}\n          >\n            {currentQuestion === total-1 ? \"Kết thúc\" : \"Câu tiếp theo\"}\n          </button>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Question;\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass Popup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      time: \"start\",\r\n      title: \"Welcome to Quizz\",\r\n      text: \"Bài kiểm tra trắc nghiệm\",\r\n      buttonText: \"Bắt đầu\"\r\n    };\r\n  }\r\n  render() {\r\n    let { numberQuestionRight, quizzes, currentQuestion } = this.props;\r\n    let { title, text, buttonText } = this.state;\r\n    let total = quizzes.length;\r\n    if (currentQuestion === total - 1) {\r\n      this.setState({\r\n        time: \"end\",\r\n        title: \"Welcome to Quizz\",\r\n        text:\r\n          \"Bạn đã trả lời chính xác \" +\r\n          numberQuestionRight +\r\n          \"/\" +\r\n          total +\r\n          \" câu hỏi\",\r\n        buttonText: \"Chơi lại\"\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"popup-container\">\r\n        <div className=\"container\">\r\n          <div className=\"col-md-8 col-md-offset-2\">\r\n            <div className=\"popup\">\r\n              <h1>{title}</h1>\r\n              <p>{text}</p>\r\n              <button className=\"fancy-btn\" onClick={this.props.popupHandle}>\r\n                {buttonText}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport Status from \"./components/Status\";\nimport Question from \"./components/Question\";\nimport Popup from \"./components/Popup\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizzes: [\n        {\n          question:\n            ' Sau cách mạng tháng Tám, Bác Hồ đã từng nói: \"Một dân tộc dốt là một dân tộc...\"',\n          answers: [\"Đói\", \"Yếu\", \"Thất bại\", \"Nhỏ bé\"],\n          correct: \"Yếu\"\n        },\n        {\n          question: \"Ngày 6 – 1 – 1946 ở Việt Nam diễn ra sự kiện nào sau đây?\",\n          answers: [\n            \"Thông qua Hiến pháp đầu tiên của nước Việt Nam Dân chủ Cộng hòa\",\n            \"Bầu cử Hội đồng nhân dân các cấp; thành lập Ủy ban hành chính các cấp\",\n            \"Quốc hội khóa I họp phiên đầu tiên, thành lập Chính phủ Liên hiệp kháng chiến\",\n            \"Tổng tuyển cử bầu đại biểu Quốc hội nước Việt Nam Dân chủ Cộng hòa.\"\n          ],\n          correct:\n            \"Tổng tuyển cử bầu đại biểu Quốc hội nước Việt Nam Dân chủ Cộng hòa.\"\n        },\n        {\n          question: \"Chiến thắng lịch sử Điện Biên Phủ diễn ra vào năm nào?\",\n          answers: [\"1945\", \"1954\", \"1975\", \"1972\"],\n          correct: \"1954\"\n        }\n      ],\n      currentQuestion: 0,\n      numberQuestionRight: 0,\n      displayPopup: true\n    };\n  }\n\n  onNextQuestion = () => {\n    let {currentQuestion, quizzes} = this.state\n    let total = quizzes.length\n    this.setState({\n      currentQuestion:\n        currentQuestion < total\n          ? currentQuestion + 1\n          : currentQuestion,\n      displayPopup:\n        currentQuestion + 1 === total\n          ? true\n          : false\n    });\n  };\n\n  popupHandle = () => {\n    this.setState({\n      displayPopup: false\n    });\n  };\n\n  onSelectQuestion = (answer, correct) => {\n    const {numberQuestionRight} = this.state\n    if (answer === correct) {\n      this.setState({\n        currentQuestion : this.state.currentQuestion + 1,\n        numberQuestionRight: numberQuestionRight + 1\n      })\n      toast.success(\"Chính xác\", {\n        position: toast.POSITION.TOP_CENTER,\n        autoClose: 1000\n      });\n    } else {\n      toast.error(\"Không đúng rồi!!\", {\n        position: toast.POSITION.TOP_CENTER,\n        autoClose: 1000\n      });\n    }\n  }\n\n  render() {\n    let { displayPopup } = this.state;\n    let elePopup =\n      displayPopup === true ? (\n        <Popup\n          popupHandle={this.popupHandle}\n          numberQuestionRight={this.state.numberQuestionRight}\n          quizzes={this.state.quizzes}\n          currentQuestion={this.state.currentQuestion}\n        />\n      ) : (\n        \"\"\n      );\n\n    return (\n      <div className=\"App container-fluid\">\n        {elePopup}\n        <div className=\"Box\">\n          <Status\n            totalQuestion={this.state.quizzes.length}\n            currentQuestion={this.state.currentQuestion}\n          />\n\n          <Question\n            quizzes={this.state.quizzes}\n            numberQuestionRight={this.state.numberQuestionRight}\n            currentQuestion={this.state.currentQuestion}\n            onNextQuestion={this.onNextQuestion}\n            onSelectQuestion = {this.onSelectQuestion}\n          />\n          <ToastContainer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}